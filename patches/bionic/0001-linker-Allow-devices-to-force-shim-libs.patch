From 9a8e59412302d554788422549d20c65c5ba2993f Mon Sep 17 00:00:00 2001
From: "Christopher R. Palmer" <crpalmer@gmail.com>
Date: Thu, 16 Mar 2017 21:33:27 -0400
Subject: [PATCH] linker: Allow devices to force shim libs

There are certain contexts in which the environment is cleansed.
Two examples that I know of are gps processes and mali gles blobs.

Generally, it is a better idea to use the environment variable because
then you can customize it on a per-service / script level and it is
easier to test and debug changes on the fly.

However, to avoid having libdimytry hexedit these blobs, allow a
last resort device level forced list of shim libraries.

[rashed]
Adapt for blueprint and add go module for dynamic C++ flag setting

Change-Id: I2f6aff9325beb5aa2f748bf72e6c3c0535d5aac2
---
 linker/Android.bp      | 20 ++++++++++++++++++
 linker/forced-shims.go | 55 ++++++++++++++++++++++++++++++++++++++++++++++++++
 linker/linker.cpp      | 11 ++++++++--
 3 files changed, 84 insertions(+), 2 deletions(-)
 create mode 100644 linker/forced-shims.go

diff --git a/linker/Android.bp b/linker/Android.bp
index 2e2ef3342..182a70353 100644
--- a/linker/Android.bp
+++ b/linker/Android.bp
@@ -1,3 +1,23 @@
+bootstrap_go_package {
+    name: "soong-forced-shims",
+    pkgPath: "android/soong/forced_shims",
+    deps: [
+        "blueprint",
+        "blueprint-pathtools",
+        "soong",
+        "soong-android",
+        "soong-cc",
+    ],
+    srcs: [
+        "forced-shims.go",
+    ],
+    pluginFor: ["soong_build"],
+}
+
+forced_shims_defaults {
+    name: "forced_shims_defaults",
+}
+
 cc_library_static {
     name: "liblinker_malloc",
     defaults: ["linux_bionic_supported"],
diff --git a/linker/forced-shims.go b/linker/forced-shims.go
new file mode 100644
index 000000000..4a973be62
--- /dev/null
+++ b/linker/forced-shims.go
@@ -0,0 +1,55 @@
+// Copyright (C) 2017 The LineageOS Project
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+package lineage;
+
+import (
+  "android/soong/android"
+  "android/soong/cc"
+
+  "github.com/google/blueprint"
+)
+
+func init() {
+  android.RegisterModuleType("forced_shims_defaults", forcedShimsFactory)
+}
+
+func forcedShimsFactory() (blueprint.Module, []interface{}) {
+  module, props := cc.DefaultsFactory()
+  android.AddLoadHook(module, forcedShims)
+
+  return module, props
+}
+
+func forcedShims(ctx android.LoadHookContext) {
+  type props struct {
+    Cppflags []string
+  }
+
+  p := &props{}
+  p.Cppflags = globalDefaults(ctx)
+
+  ctx.AppendProperties(p)
+}
+
+func globalDefaults(ctx android.BaseContext) ([]string) {
+  var cppFlags []string
+
+  device_forced_shim_libs := ctx.DeviceConfig().ForcedShims()
+  if (len(device_forced_shim_libs) > 0) {
+    cppFlags = append(cppFlags, "-DFORCED_SHIM_LIBS=")
+    cppFlags = append(cppFlags, device_forced_shim_libs)
+  }
+
+  return cppFlags
+}
diff --git a/linker/linker.cpp b/linker/linker.cpp
index 8cafa6ea8..469eb4ab8 100644
--- a/linker/linker.cpp
+++ b/linker/linker.cpp
@@ -715,8 +715,7 @@ static void reset_g_active_shim_libs(void) {
   }
 }
 
-void parse_LD_SHIM_LIBS(const char* path) {
-  g_ld_all_shim_libs.clear();
+void parse_shim_libs(const char* path) {
   if (path != nullptr) {
     // We have historically supported ':' as well as ' ' in LD_SHIM_LIBS.
     for (const auto& pair : android::base::Split(path, " :")) {
@@ -730,6 +729,14 @@ void parse_LD_SHIM_LIBS(const char* path) {
   reset_g_active_shim_libs();
 }
 
+void parse_LD_SHIM_LIBS(const char* path) {
+  g_ld_all_shim_libs.clear();
+#ifdef FORCED_SHIM_LIBS
+  parse_shim_libs(FORCED_SHIM_LIBS);
+#endif
+  parse_shim_libs(path);
+}
+
 template<typename F>
 static void for_each_matching_shim(const char *const path, F action) {
   if (path == nullptr) return;
-- 
2.11.0

